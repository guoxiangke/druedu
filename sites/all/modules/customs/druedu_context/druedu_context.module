<?php
/**
* @file
* Context awareness of the application
*/

/**
 * Perform setup tasks for non-cached page requests.
 * In our case, if the user is not logged in, go to the login page.
 *
 * This hook is run at the beginning of the page request. It is typically
 * used to set up global parameters that are needed later in the request.
 * When this hook is called, the theme and all modules are already loaded in
 * memory.
 *
 * This hook is not run on cached pages.
 *
 * To add CSS or JS that should be present on all pages, modules should not
 * implement this hook, but declare these files in their .info file.
 *
 * @see hook_boot()
 */
// function druedu_context_init(){
//   global $user;
//   if (user_is_anonymous() && arg(0) != 'user') {
//     drupal_goto('user/login');
//   }
// }

/** Implementation of hook_og_context_negotiation_info()
 *
 */
function druedu_context_permission() {
	return array(
    'login context only grades administrator' => array(
      'title' => t('User login grades and groups context filter'),
      'description' => t('Allow the system to filter the grades for which the user is admin on login to determine the context.'),
    ),
  );
}

function druedu_context_og_context_negotiation_info() {
	$providers = array();

	$providers['user_default_grade_context'] = array(
		'name' => t('Druedu group context'),
		'description' => t('Determines context by checking node path, then session, and finally groups user is subscribed to.'),
		'callback' => 'druedu_user_default_group_og_context_handler',
		'menu path' => array('home','node/%','node/%/edit','node/add','subjects','bulletins','homework','calendar', 'groups'),
	);

	return $providers;
}

/** Context negociation handler implementation.
 * Initialize grade/group context if no context has been already set.
 */
function druedu_user_default_group_og_context_handler() {
		return druedu_context_initialisation();
}

/** Initialisation of the group context
 *
 */
function druedu_context_initialisation() {
	global $user;
	// We check only for authenticated users
	if($user->uid != 0 ) {
		$contexts = array('node' => array());

		// Check first if we are visiting a group node, and set the context if we are visiting the good kind of node.
		$contexts = og_context_handler_node();
		if(!empty($contexts) && !empty($contexts['node'])) {
			foreach($contexts['node'] as $key => $gid) {
				$entity = node_load($gid);
				if(!in_array($entity->type, array('grade','group'))){
					unset($contexts['node'][$key]);
				}
			}
		}

		// If we don't have context already with node, check if one of the group IDs already exists in the session, and if
		// so use it. We want our handler to be a default behavior that does not override existing behavior.
		// Do this ONLY if the session id corresponds toa grade or a group, not a subject!
		if (empty($contexts['node']) && !empty($_SESSION['og_context']) && $entity = node_load($_SESSION['og_context']['gid'])) {
			if(in_array($entity->type, array('grade','group'))) {
				$contexts = array(
					$_SESSION['og_context']['group_type'] => array($_SESSION['og_context']['gid']),
				);
			}
		}

		// If the session doesn't exist, take the grade groups of the user, or the groups if no grade is found.
		// No need to take a single group at this point: the og_context_determine_context() function does it for us.
		// @TODO: add an option in the the user profile to chose the default group on login for authorized users - return a single group then.
		if(empty($contexts['node'])) {
			$grade_user_preference = NULL;
			if(module_exists('druedu_user')) {
			  $user_preferences = druedu_get_user_preferences($user->uid);
			 }
			  $user_preferences = json_decode($user_preferences['preferences']);
			  $grade_user_preference = (isset($user_preferences->default_grade)) ? $user_preferences->default_grade : null;
			if(!is_null($grade_user_preference)) {
				$contexts['node'] = array($grade_user_preference);
			}
			else {

				$contexts_candidates = array();
				$user_groups = og_get_groups_by_user($user);
				if(user_access('login context only grades administrator')){
					foreach($user_groups['node'] as $nid) {
						$entity = node_load($nid);
						if(og_user_access('node', $nid, 'update group')){
							$contexts_candidates[$entity->type][] = $entity->nid;
						}
					}
				}
				else{
					foreach($user_groups['node'] as $nid) {
						$entity = node_load($nid);
						$contexts_candidates[$entity->type][] = $entity->nid;
					}
				}
				if(!empty($contexts_candidates['grade'])) {
					$contexts['node'] = $contexts_candidates['grade'];
				} else {
					$contexts['node'] = $contexts_candidates['group'];
				}
			}
		}
		return $contexts;
	}

}

/* =================================== nodeapi set context ========================================== */

/** Implementation of hook_node_view
 *
 */
function druedu_context_node_view($node, $view_mode, $langcode) {

	$context = druedu_context_subject_context_wrapper($node);

}

/** Implementation of hook_node_insert
 *
 */
function druedu_context_node_insert($node) {

	$context = druedu_context_subject_context_wrapper($node);

}

/** Implementation of hook_node_prepare
 *
 */
function druedu_context_node_prepare($node) {

	$context = druedu_context_subject_context_wrapper($node);

}

/* =================================== END nodeapi set context ========================================== */

function druedu_context_form_structure_unit_node_form_alter(&$form, &$form_state, $form_id) {

	if(!$form['nid']['#value']) {
		$context = subject_context();
		$subject_node = node_load($context['gid']);
		drupal_set_message(t('The stucture unit will be part of the subject ').$subject_node->title,'warning');
	}

}

/* =================================== Subject context ========================================== */

/**
 * Wrapper that determines the appropriate parameter to give to subject_context()
 * @param $node the node from which we need to extract the $group_subject
 */
function druedu_context_subject_context_wrapper($node) {

	if($node->type == 'subject') {
		$context = subject_context($node);
		return $context;
	}
	 if($node->type == 'structure_unit' && isset($node->nid)) {
		//get the subject node from the reference field. Get only the first element - our field has only one value
		$subjects_groups_audience_value = field_get_items('node', $node, 'field_subjects_groups_audience', $node->language);

		// find the referenced group audience if is set, default otherwise. NOTE: Only the first reference, no multiple reference
		if(is_array($subjects_groups_audience_value)) {
			$reference = reset($subjects_groups_audience_value);
			$subject_node = node_load($reference['target_id']);
			$context = subject_context($subject_node);
		} else {
			$context = subject_context();
		}


		return $context;
	}

}

/**
 * Returns the appropriate subject context
 * @param $subject_group the group entity
 * @see og_context()
 */
function subject_context($group_subject = NULL) {

	global $user;
	$context = &drupal_static(__FUNCTION__);

	// If we already have a context in session and if we are not trying to set a new context, grab the cureent context in session
	if(!empty($_SESSION['druedu_context_subject']) && empty($group_subject)){
		$context = $_SESSION['druedu_context_subject'];
	}

	if(!isset($context)){
		// If we set the context in parameters
		if (!empty($group_subject) && $group_subject->type == 'subject') {
			list($gid) = entity_extract_ids('node', $group_subject);
			$context = array('group_type' => 'node', 'gid' => $gid);
		}
		// Get a default subject context
		elseif ($gid = druedu_context_determine_subject_context()) {
			$context = array('group_type' => 'node', 'gid' => $gid);
		} else {
			watchdog('druedu_context',t('Error: failed to determine subject context - check if a "subject" content type (machine name) exists.'), NULL, WATCHDOG_ALERT);
		}

		if ($user->uid) {
			// Save the group ID in the authenticated user's session.
			$_SESSION['druedu_context_subject'] = array('group_type' => 'node', 'gid' => $gid);
		}
	}

	return $context;

}

/**
 * Determine the best matching subject context of a viewed page (first of the current grade).
 *
 */
function druedu_context_determine_subject_context() {

	$gids = array();
	if ($contexts = druedu_subject_default_contexts()) {
		// Check if one of the group IDs already exists in the session, and if
		// so use it.
		$gids = $contexts['node'];
		if (!empty($_SESSION['druedu_context_subject']['group_type']) && $_SESSION['druedu_context_subject']['group_type'] == 'node' && in_array($_SESSION['druedu_context_subject']['gid'], $gids)) {
			$gid = $_SESSION['druedu_context_subject']['gid'];
		}
		else {
			// Grab the first group ID.
			$gid = reset($gids);
		}
		//Warn the user that it is a fallback
		drupal_set_message(t('No subject has been selected: a default subject has been chosen.'),'warning');
	}

	return !empty($gid) ? $gid : FALSE;

}

/**
 * Get the list of subjects of a given Group context.
 *
 */
function druedu_subject_default_contexts() {

	$contexts = &drupal_static(__FUNCTION__);

	if (!isset($contexts)) {
		$contexts = array('node' => array());
		$parent_context = og_context();
		$target_gid = $parent_context['gid'];
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'og_membership')
			->propertyCondition('gid', $target_gid, '=')
			->propertyCondition('entity_type', 'node', '=');
		$result = $query->execute();

		$og_memberships = entity_load('og_membership', array_keys($result['og_membership']));
		$etids = array();
		foreach($og_memberships as $og_membership) {
			$etids[] = $og_membership->etid;
		}
		//Get the corresponding subject node ids
		$nodes = node_load_multiple($etids);
		foreach($nodes as $node) {
			if($node->type == 'subject') {
				$contexts['node'][] = $node->nid;
			}
		}
	}
	return $contexts;

}

/** Implementation of hook_node_view_alter
 * Make sure the links displayed are aware of the subject context
 */
function druedu_context_node_view_alter(&$build) {

	if($build['#bundle'] == 'structure_unit' && isset($build['#node']->field_subjects_groups_audience)) {
		$context = subject_context();
		$build['links']['book']['#links']['book_add_child']['query']['field_subjects_groups_audience'] = $context['gid'];
	}

}

/* =================================== END Subject context ========================================== */

/**
 * Alter links in the active trail before it is rendered as the breadcrumb.
 *
 * This hook is invoked by menu_get_active_breadcrumb() and allows alteration
 * of the breadcrumb links for the current page, which may be preferred instead
 * of setting a custom breadcrumb via drupal_set_breadcrumb().
 *
 * Implementations should take into account that menu_get_active_breadcrumb()
 * subsequently performs the following adjustments to the active trail *after*
 * this hook has been invoked:
 * - The last link in $active_trail is removed, if its 'href' is identical to
 *   the 'href' of $item. This happens, because the breadcrumb normally does
 *   not contain a link to the current page.
 * - The (second to) last link in $active_trail is removed, if the current $item
 *   is a MENU_DEFAULT_LOCAL_TASK. This happens in order to do not show a link
 *   to the current page, when being on the path for the default local task;
 *   e.g. when being on the path node/%/view, the breadcrumb should not contain
 *   a link to node/%.
 *
 * Each link in the active trail must contain:
 * - title: The localized title of the link.
 * - href: The system path to link to.
 * - localized_options: An array of options to pass to url().
 *
 * @param $active_trail
 *   An array containing breadcrumb links for the current page.
 * @param $item
 *   The menu router item of the current page.
 *
 * @see drupal_set_breadcrumb()
 * @see menu_get_active_breadcrumb()
 * @see menu_get_active_trail()
 * @see menu_set_active_trail()
 */
function druedu_context_menu_breadcrumb_alter(&$active_trail, $item) {
	
	$active_trail = array_slice($active_trail,2);
	// dpm($active_trail);
	// dpm($item);
}

/**
* Responds to OG membership deletion.
*
* This hook is invoked after the OG membership has been removed from the database.
*
* @param OgMembership $og_membership
*   The OG membership that is being deleted.
*
* @see hook_entity_delete()
*/
/*
* Reset context after unsubscribe a public group.
*/
function druedu_context_og_membership_delete(OgMembership $og_membership) {
  if($og_membership->group_type == 'node' && $og_membership->entity_type == 'user') {
    $node = node_load($og_membership->gid);
    if($node->type == 'group') {
      //reinitialized grade context
      if(isset($_SESSION['og_context'])){
        unset($_SESSION['og_context']);
      }
    }
  }
}

/*
* Implements HOOK_block_info
*/
//Blocks definition
function druedu_context_block_info() {
// takes user pictures from user profile and put it in a block
  $blocks['og_group_picture'] = array(
    'info' => t('OG group picture'),
    'cache' => DRUPAL_NO_CACHE, //to be confirmed
  );

  return $blocks;
}

/*
* Implements HOOK_block_view
*/
//This is where we gather the elements from the node object (the tabs buttons) and include them in the block
function druedu_context_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'og_group_picture':
    $block['title'] = NULL;
    $block['content'] = NULL;
    	$nid = arg(1);
    	if(!empty($nid) && is_numeric($nid)) {
    		$node = node_load($nid);
    		if(is_object($node)) {
    			$info_group = _druedu_image_and_title_og_groups('group-pictures', $nid, TRUE);
		      	$block['title'] = $info_group['title'];
		      	$block['content'] = drupal_render($info_group['image']);
    		}
    	}
    	break; 	
    }
    return $block;
}



function druedu_context_form_druedu_user_preferences_form_alter(&$form, &$form_state) {
	$uid = arg(1);
	$user = user_load($uid);
	$grade_default_option = NULL;
	if(module_exists('druedu_user')) {
		$user_preferences = druedu_get_user_preferences($uid);
		$user_preferences = json_decode($user_preferences['preferences']);
		$grade_default_option = (isset($user_preferences->default_grade)) ? $user_preferences->default_grade : null;
	}
	$all_grades = _get_groups_by_user_and_node_type($user, 'grade');
	$grade_options = array();
	if(sizeof($all_grades) > 1) {
		if(user_access('login context only grades administrator')){
			foreach ($all_grades as $id => $grade) {
			  	if(og_user_access('node', $id, 'update group', $user)){
			    	$grade_options[$id] = $grade;
			    }
			}
		}
		else {
			foreach ($all_grades as $id => $grade) {
			    $grade_options[$id] = $grade;
			}
		}
		$form['grade_container'] = array(
		    '#type' => 'fieldset',
		    '#title' => '<i class="icon-check"></i>'.t('Default grade'),
		    '#collapsed' => TRUE,
		    '#collapsible' => TRUE,
		    '#weight' => 0,
		);
		$form['grade_container']['grade'] = array(
		    '#type' => 'radios',
		    '#options' => $grade_options,
		    '#default_value' => $grade_default_option,
		);
	}
	else {
		foreach ($all_grades as $id => $grade) {
			$grade_default_option = $id;
		}
		$form['grade'] = array(
		    '#type' => 'hidden',
		    '#value' => $grade_default_option,
		);
	}
	$form['#submit'][] = 'druedu_context_grade_preference_submit';
}

function druedu_context_grade_preference_submit($form, &$form_state) {
  $form_state['preferences']['default_grade'] = $form_state['values']['grade'];
  $preferences = json_encode($form_state['preferences']);
  druedu_set_user_preferences($form_state['uid'], $preferences, 'update');
}

